{"pageProps":{"post":{"title":"NativeScript, Databases, and You","date":"2021-05-11T19:14:45+0300","tags":["nativescript","sql","sqlite","typeorm","typescript"],"image":{"link":"/content/nativescript-databases-you/tobias-fischer-PkbZahEG2Ng-unsplash.jpg","author":{"name":"Tobias Fischer","link":"https://unsplash.com/@tofi"},"source":{"name":"Unsplash","link":"https://unsplash.com"}},"medium":"https://ozymandiasthegreat.medium.com/android-continuous-background-services-with-nativescript-a0840fc1eceb","devto":"https://dev.to/ozymandiasthegreat/android-continuous-background-services-with-nativescript-42c9","slug":"2021/05/11/nativescript-databases-you","content":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Or how to get recent versions of ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":34,"offset":33}}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/typeorm","children":[{"type":"text","value":"typeorm","position":{"start":{"line":1,"column":35,"offset":34},"end":{"line":1,"column":42,"offset":41}}}],"position":{"start":{"line":1,"column":34,"offset":33},"end":{"line":1,"column":82,"offset":81}}},{"type":"text","value":" and NativeScript to play nicely together.","position":{"start":{"line":1,"column":82,"offset":81},"end":{"line":1,"column":124,"offset":123}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":124,"offset":123}}},{"type":"paragraph","children":[{"type":"text","value":"By recent, I mean the latest version of typeorm as of this writing and NativeScript 7.\nNativeScript 8 has been released recently, but since they overhauled the website for this version,\nthe documentation is incomplete and not exhaustive. Also, most plugins haven't been updated for version 8 yet.","position":{"start":{"line":3,"column":1,"offset":125},"end":{"line":5,"column":111,"offset":421}}}],"position":{"start":{"line":3,"column":1,"offset":125},"end":{"line":5,"column":111,"offset":421}}},{"type":"html","value":"<!--more-->","position":{"start":{"line":7,"column":1,"offset":423},"end":{"line":7,"column":12,"offset":434}}},{"type":"paragraph","children":[{"type":"text","value":"Whether you're upgrading or starting a new project, you're likely to run into some issues.\nLeaving your code aside, typeorm version 0.2.26 and later doesn't play nice with webpack in NativeScript projects.\nThere are several related issues in the official repository of typeorm, but the author of typeorm doesn't consider\nthem a problem as evidenced by several versions with no fixes and closing of related bugs without resolution.","position":{"start":{"line":9,"column":1,"offset":436},"end":{"line":12,"column":110,"offset":866}}}],"position":{"start":{"line":9,"column":1,"offset":436},"end":{"line":12,"column":110,"offset":866}}},{"type":"paragraph","children":[{"type":"text","value":"Another thing to consider is typeorm's viability going forward. The work on current architecture has stalled, and\nthe author plans to introduce breaking changes going forward. The future of this library seems pretty shaky right now.\nHopefully, considering the popularity of this project, we'll get a fork avoiding breaking changes and easing migration.","position":{"start":{"line":14,"column":1,"offset":868},"end":{"line":16,"column":120,"offset":1220}}}],"position":{"start":{"line":14,"column":1,"offset":868},"end":{"line":16,"column":120,"offset":1220}}},{"type":"paragraph","children":[{"type":"text","value":"For the reasons above you should not use typeorm on new projects. If you're OK with writing raw SQL queries,\nyou can use ","position":{"start":{"line":18,"column":1,"offset":1222},"end":{"line":19,"column":13,"offset":1343}}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/nativescript-sqlite","children":[{"type":"text","value":"nativescript-sqlite","position":{"start":{"line":19,"column":14,"offset":1344},"end":{"line":19,"column":33,"offset":1363}}}],"position":{"start":{"line":19,"column":13,"offset":1343},"end":{"line":19,"column":85,"offset":1415}}},{"type":"text","value":". Otherwise, there are a couple of alternatives. For an offline local database, you might want to look into ","position":{"start":{"line":19,"column":85,"offset":1415},"end":{"line":19,"column":193,"offset":1523}}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/@triniwiz/nativescript-couchbase","children":[{"type":"text","value":"@triniwiz/nativescript-couchbase","position":{"start":{"line":19,"column":194,"offset":1524},"end":{"line":19,"column":226,"offset":1556}}}],"position":{"start":{"line":19,"column":193,"offset":1523},"end":{"line":19,"column":291,"offset":1621}}},{"type":"text","value":". As I haven't used CouchBase before, I can't say much about this\nplugin, other than it seems well maintained and supported.","position":{"start":{"line":19,"column":291,"offset":1621},"end":{"line":20,"column":59,"offset":1745}}}],"position":{"start":{"line":18,"column":1,"offset":1222},"end":{"line":20,"column":59,"offset":1745}}},{"type":"paragraph","children":[{"type":"text","value":"Another alternative, especially if you have bigger needs than a local database can satisfy, is\n","position":{"start":{"line":22,"column":1,"offset":1747},"end":{"line":23,"column":1,"offset":1842}}},{"type":"link","title":null,"url":"https://www.npmjs.com/package/@nativescript/firebase","children":[{"type":"text","value":"@nativescript/firebase","position":{"start":{"line":23,"column":2,"offset":1843},"end":{"line":23,"column":24,"offset":1865}}}],"position":{"start":{"line":23,"column":1,"offset":1842},"end":{"line":23,"column":79,"offset":1920}}},{"type":"text","value":". This plugin is one the most\npopular plugins for NativeScript and as such it sees frequent updates and good support. It provides a cloud\ndatabase, push notifications, social third-party authentication, and much more. For the vast majority of new projects,\nthis is the way forward.","position":{"start":{"line":23,"column":79,"offset":1920},"end":{"line":26,"column":25,"offset":2201}}}],"position":{"start":{"line":22,"column":1,"offset":1747},"end":{"line":26,"column":25,"offset":2201}}},{"type":"paragraph","children":[{"type":"text","value":"That said, if you already use typeorm or choose to use it despite the issues above, here's how to get it\nworking with NativeScript 7.","position":{"start":{"line":28,"column":1,"offset":2203},"end":{"line":29,"column":29,"offset":2336}}}],"position":{"start":{"line":28,"column":1,"offset":2203},"end":{"line":29,"column":29,"offset":2336}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"The Setup","position":{"start":{"line":31,"column":4,"offset":2341},"end":{"line":31,"column":13,"offset":2350}}}],"position":{"start":{"line":31,"column":1,"offset":2338},"end":{"line":31,"column":13,"offset":2350}}},{"type":"paragraph","children":[{"type":"text","value":"First, install ","position":{"start":{"line":33,"column":1,"offset":2352},"end":{"line":33,"column":16,"offset":2367}}},{"type":"inlineCode","value":"nativescript-sqlite","position":{"start":{"line":33,"column":16,"offset":2367},"end":{"line":33,"column":37,"offset":2388}}},{"type":"text","value":" as it provides the database driver for the actual database operations.\nThe install the latest version of ","position":{"start":{"line":33,"column":37,"offset":2388},"end":{"line":34,"column":35,"offset":2494}}},{"type":"inlineCode","value":"typeorm","position":{"start":{"line":34,"column":35,"offset":2494},"end":{"line":34,"column":44,"offset":2503}}},{"type":"text","value":". Note that commands differ, as ","position":{"start":{"line":34,"column":44,"offset":2503},"end":{"line":34,"column":76,"offset":2535}}},{"type":"inlineCode","value":"nativescript-sqlite","position":{"start":{"line":34,"column":76,"offset":2535},"end":{"line":34,"column":97,"offset":2556}}},{"type":"text","value":" is a NativeScript\nplugin and so needs additional setup that ","position":{"start":{"line":34,"column":97,"offset":2556},"end":{"line":35,"column":43,"offset":2617}}},{"type":"inlineCode","value":"ns","position":{"start":{"line":35,"column":43,"offset":2617},"end":{"line":35,"column":47,"offset":2621}}},{"type":"text","value":" command will perform for us.","position":{"start":{"line":35,"column":47,"offset":2621},"end":{"line":35,"column":76,"offset":2650}}}],"position":{"start":{"line":33,"column":1,"offset":2352},"end":{"line":35,"column":76,"offset":2650}}},{"type":"code","lang":"bash","meta":null,"value":"ns plugin add nativescript-sqlite\nnpm i @typeorm@latest","position":{"start":{"line":37,"column":1,"offset":2652},"end":{"line":40,"column":4,"offset":2719}}},{"type":"paragraph","children":[{"type":"text","value":"Now, regardless of which flavor of NativeScript you use, in your ","position":{"start":{"line":42,"column":1,"offset":2721},"end":{"line":42,"column":66,"offset":2786}}},{"type":"inlineCode","value":"main.ts","position":{"start":{"line":42,"column":66,"offset":2786},"end":{"line":42,"column":75,"offset":2795}}},{"type":"text","value":" setup the database connection.\nThere are official and otherwise examples for various flavors in the ","position":{"start":{"line":42,"column":75,"offset":2795},"end":{"line":43,"column":70,"offset":2896}}},{"type":"inlineCode","value":"typeorm","position":{"start":{"line":43,"column":70,"offset":2896},"end":{"line":43,"column":79,"offset":2905}}},{"type":"text","value":" Github account.\nThose examples are of rather poor quality, but they did provide a useful starting point for me.\nAlso, for this example, I'll skip entity definitions as they work just as described in the documentation\nand they're not relevant here. All the issues we'll encounter stem from webpack (and poorly thought-through changes in ","position":{"start":{"line":43,"column":79,"offset":2905},"end":{"line":46,"column":120,"offset":3242}}},{"type":"inlineCode","value":"typeorm","position":{"start":{"line":46,"column":120,"offset":3242},"end":{"line":46,"column":129,"offset":3251}}},{"type":"text","value":").","position":{"start":{"line":46,"column":129,"offset":3251},"end":{"line":46,"column":131,"offset":3253}}}],"position":{"start":{"line":42,"column":1,"offset":2721},"end":{"line":46,"column":131,"offset":3253}}},{"type":"code","lang":"typescript","meta":null,"value":"import { platformNativeScriptDynamic } from \"@nativescript/angular\";\nimport { AppModule } from \"./app/app.module\";\nimport { createConnection } from \"typeorm/browser\";\nconst driver = require(\"nativescript-sqlite\");\n\n\ncreateConnection({\n    database: \"notes.db\",\n    type: \"nativescript\",\n    driver,\n    entities: [/* ... put your entities here */],\n}).then((conn) => {\n    conn.synchronize(false);\n}).catch((err) => console.error(err));\n\n\nplatformNativeScriptDynamic().bootstrapModule(AppModule);\n","position":{"start":{"line":48,"column":1,"offset":3255},"end":{"line":67,"column":4,"offset":3770}}},{"type":"paragraph","children":[{"type":"text","value":"If you're upgrading from version of ","position":{"start":{"line":69,"column":1,"offset":3772},"end":{"line":69,"column":37,"offset":3808}}},{"type":"inlineCode","value":"typeorm","position":{"start":{"line":69,"column":37,"offset":3808},"end":{"line":69,"column":46,"offset":3817}}},{"type":"text","value":" 0.2.25 or earlier, you're going to be greeted by a wall\nof ","position":{"start":{"line":69,"column":46,"offset":3817},"end":{"line":70,"column":4,"offset":3877}}},{"type":"inlineCode","value":"Critical-Dependency","position":{"start":{"line":70,"column":4,"offset":3877},"end":{"line":70,"column":25,"offset":3898}}},{"type":"text","value":" and missing module warnings and these 2 errors when you try running your project:","position":{"start":{"line":70,"column":25,"offset":3898},"end":{"line":70,"column":107,"offset":3980}}}],"position":{"start":{"line":69,"column":1,"offset":3772},"end":{"line":70,"column":107,"offset":3980}}},{"type":"code","lang":"bash","meta":null,"value":"ERROR in ../node_modules/app-root-path/lib/resolve.js\nModule not found: Error: Can't resolve 'module' in '/home/ozymandias/Projects/scratchpad/typeorm-example/node_modules/app-root-path/lib'\n @ ../node_modules/app-root-path/lib/resolve.js 7:18-35\n @ ../node_modules/app-root-path/lib/app-root-path.js\n @ ../node_modules/app-root-path/index.js\n @ ../node_modules/typeorm/browser/logger/FileLogger.js\n @ ../node_modules/typeorm/browser/index.js\n @ ./main.ts\n\nERROR in ../node_modules/xml2js/lib/parser.js\nModule not found: Error: Can't resolve 'timers' in '/home/ozymandias/Projects/scratchpad/typeorm-example/node_modules/xml2js/lib'\n @ ../node_modules/xml2js/lib/parser.js 17:17-34\n @ ../node_modules/xml2js/lib/xml2js.js\n @ ../node_modules/typeorm/browser/connection/options-reader/ConnectionOptionsXmlReader.js\n @ ../node_modules/typeorm/browser/connection/ConnectionOptionsReader.js\n @ ../node_modules/typeorm/browser/index.js\n @ ./main.ts","position":{"start":{"line":72,"column":1,"offset":3982},"end":{"line":90,"column":4,"offset":4936}}},{"type":"paragraph","children":[{"type":"text","value":"For the warnings, just add every package mentioned there to your ","position":{"start":{"line":92,"column":1,"offset":4938},"end":{"line":92,"column":66,"offset":5003}}},{"type":"inlineCode","value":"externals","position":{"start":{"line":92,"column":66,"offset":5003},"end":{"line":92,"column":77,"offset":5014}}},{"type":"text","value":"\nin your webpack config. As for the ","position":{"start":{"line":92,"column":77,"offset":5014},"end":{"line":93,"column":36,"offset":5050}}},{"type":"inlineCode","value":"Critical-Dependency","position":{"start":{"line":93,"column":36,"offset":5050},"end":{"line":93,"column":57,"offset":5071}}},{"type":"text","value":" ones, I haven't quite figured\nout how to solve them, but you can disable them by adding this to your webpack config:","position":{"start":{"line":93,"column":57,"offset":5071},"end":{"line":94,"column":87,"offset":5188}}}],"position":{"start":{"line":92,"column":1,"offset":4938},"end":{"line":94,"column":87,"offset":5188}}},{"type":"code","lang":"javascript","meta":null,"value":"stats: {\n    warningsFilter: [/critical dependency:/i],\n}","position":{"start":{"line":96,"column":1,"offset":5190},"end":{"line":100,"column":4,"offset":5265}}},{"type":"paragraph","children":[{"type":"text","value":"As for the errors, just add ","position":{"start":{"line":102,"column":1,"offset":5267},"end":{"line":102,"column":29,"offset":5295}}},{"type":"inlineCode","value":"module","position":{"start":{"line":102,"column":29,"offset":5295},"end":{"line":102,"column":37,"offset":5303}}},{"type":"text","value":" to externals as well. Then in node shim configuration\nsection, change ","position":{"start":{"line":102,"column":37,"offset":5303},"end":{"line":103,"column":17,"offset":5374}}},{"type":"inlineCode","value":"timers","position":{"start":{"line":103,"column":17,"offset":5374},"end":{"line":103,"column":25,"offset":5382}}},{"type":"text","value":" from ","position":{"start":{"line":103,"column":25,"offset":5382},"end":{"line":103,"column":31,"offset":5388}}},{"type":"inlineCode","value":"false","position":{"start":{"line":103,"column":31,"offset":5388},"end":{"line":103,"column":38,"offset":5395}}},{"type":"text","value":" to ","position":{"start":{"line":103,"column":38,"offset":5395},"end":{"line":103,"column":42,"offset":5399}}},{"type":"inlineCode","value":"'empty'","position":{"start":{"line":103,"column":42,"offset":5399},"end":{"line":103,"column":51,"offset":5408}}},{"type":"text","value":".","position":{"start":{"line":103,"column":51,"offset":5408},"end":{"line":103,"column":52,"offset":5409}}}],"position":{"start":{"line":102,"column":1,"offset":5267},"end":{"line":103,"column":52,"offset":5409}}},{"type":"paragraph","children":[{"type":"text","value":"Now, the project compiles, but upon startup, you'll likely crash with\n","position":{"start":{"line":105,"column":1,"offset":5411},"end":{"line":106,"column":1,"offset":5481}}},{"type":"inlineCode","value":"ReferenceError: process is not defined","position":{"start":{"line":106,"column":1,"offset":5481},"end":{"line":106,"column":41,"offset":5521}}},{"type":"text","value":". Yes, we'll be saved by the good old webpack\n","position":{"start":{"line":106,"column":41,"offset":5521},"end":{"line":107,"column":1,"offset":5567}}},{"type":"inlineCode","value":"DefinePlugin","position":{"start":{"line":107,"column":1,"offset":5567},"end":{"line":107,"column":15,"offset":5581}}},{"type":"text","value":".","position":{"start":{"line":107,"column":15,"offset":5581},"end":{"line":107,"column":16,"offset":5582}}}],"position":{"start":{"line":105,"column":1,"offset":5411},"end":{"line":107,"column":16,"offset":5582}}},{"type":"paragraph","children":[{"type":"text","value":"In your webpack config, ","position":{"start":{"line":109,"column":1,"offset":5584},"end":{"line":109,"column":25,"offset":5608}}},{"type":"inlineCode","value":"DefinePlugin","position":{"start":{"line":109,"column":25,"offset":5608},"end":{"line":109,"column":39,"offset":5622}}},{"type":"text","value":" section, change ","position":{"start":{"line":109,"column":39,"offset":5622},"end":{"line":109,"column":56,"offset":5639}}},{"type":"inlineCode","value":"process: 'global.process'","position":{"start":{"line":109,"column":56,"offset":5639},"end":{"line":109,"column":83,"offset":5666}}},{"type":"text","value":" to\n","position":{"start":{"line":109,"column":83,"offset":5666},"end":{"line":110,"column":1,"offset":5670}}},{"type":"inlineCode","value":"'process.env.NODE_ENV': JSON.stringify(production ? 'production' : 'development')","position":{"start":{"line":110,"column":1,"offset":5670},"end":{"line":110,"column":84,"offset":5753}}},{"type":"text","value":".","position":{"start":{"line":110,"column":84,"offset":5753},"end":{"line":110,"column":85,"offset":5754}}}],"position":{"start":{"line":109,"column":1,"offset":5584},"end":{"line":110,"column":85,"offset":5754}}},{"type":"paragraph","children":[{"type":"text","value":"At this point app still crashes at startup but the error is different: ","position":{"start":{"line":112,"column":1,"offset":5756},"end":{"line":112,"column":72,"offset":5827}}},{"type":"inlineCode","value":"TypeError: util.inherits is not a function","position":{"start":{"line":112,"column":72,"offset":5827},"end":{"line":112,"column":116,"offset":5871}}},{"type":"text","value":".\nNow the fix for this one is magic, for I have no idea why it works. Anyway, here it is:\nin your webpack config, under ","position":{"start":{"line":112,"column":116,"offset":5871},"end":{"line":114,"column":31,"offset":5991}}},{"type":"inlineCode","value":"resolve","position":{"start":{"line":114,"column":31,"offset":5991},"end":{"line":114,"column":40,"offset":6000}}},{"type":"text","value":" key add this line ","position":{"start":{"line":114,"column":40,"offset":6000},"end":{"line":114,"column":59,"offset":6019}}},{"type":"inlineCode","value":"mainFields: ['browser', 'module', 'main']","position":{"start":{"line":114,"column":59,"offset":6019},"end":{"line":114,"column":102,"offset":6062}}},{"type":"text","value":".","position":{"start":{"line":114,"column":102,"offset":6062},"end":{"line":114,"column":103,"offset":6063}}}],"position":{"start":{"line":112,"column":1,"offset":5756},"end":{"line":114,"column":103,"offset":6063}}},{"type":"paragraph","children":[{"type":"text","value":"And that is it, my friends. At this point, you should be able to run your app successfully.","position":{"start":{"line":116,"column":1,"offset":6065},"end":{"line":116,"column":92,"offset":6156}}}],"position":{"start":{"line":116,"column":1,"offset":6065},"end":{"line":116,"column":92,"offset":6156}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Postscript","position":{"start":{"line":118,"column":4,"offset":6161},"end":{"line":118,"column":14,"offset":6171}}}],"position":{"start":{"line":118,"column":1,"offset":6158},"end":{"line":118,"column":14,"offset":6171}}},{"type":"paragraph","children":[{"type":"text","value":"I've considered (and actually tried) to stick to ","position":{"start":{"line":120,"column":1,"offset":6173},"end":{"line":120,"column":50,"offset":6222}}},{"type":"inlineCode","value":"typeorm","position":{"start":{"line":120,"column":50,"offset":6222},"end":{"line":120,"column":59,"offset":6231}}},{"type":"text","value":" version 0.2.25. It certainly takes less setup.\nHowever, I ran into a bug that's only present in that version. Upon retrieving an entry from the database and modifying\nit, saving fails with an utterly unhelpful error message. After spending half a day thinking it's a bug with my code,\nI accidentally ran across a bug for this particular issue. As described in the bug, the only fix is upgrading.\nSo since it's the same errors whether it's version 0.2.26 or the latest version, I buckled up and upgraded.\nHopefully, this has been helpful for you and saved you some headache.","position":{"start":{"line":120,"column":59,"offset":6231},"end":{"line":125,"column":70,"offset":6805}}}],"position":{"start":{"line":120,"column":1,"offset":6173},"end":{"line":125,"column":70,"offset":6805}}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Full webpack.config.js for reference","position":{"start":{"line":127,"column":4,"offset":6810},"end":{"line":127,"column":40,"offset":6846}}}],"position":{"start":{"line":127,"column":1,"offset":6807},"end":{"line":127,"column":40,"offset":6846}}},{"type":"code","lang":"typescript","meta":null,"value":"const { join, relative, resolve, sep, dirname } = require('path');\nconst fs = require('fs');\n\nconst webpack = require('webpack');\nconst nsWebpack = require('@nativescript/webpack');\nconst nativescriptTarget = require('@nativescript/webpack/nativescript-target');\nconst {\n  nsSupportHmrNg\n} = require('@nativescript/webpack/transformers/ns-support-hmr-ng');\nconst { nsTransformNativeClassesNg } = require(\"@nativescript/webpack/transformers/ns-transform-native-classes-ng\");\nconst {\n  parseWorkspaceConfig, hasConfigurations\n} = require('@nativescript/webpack/helpers/angular-config-parser');\nconst {\n  getMainModulePath\n} = require('@nativescript/webpack/utils/ast-utils');\nconst { getNoEmitOnErrorFromTSConfig, getCompilerOptionsFromTSConfig } = require(\"@nativescript/webpack/utils/tsconfig-utils\");\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\nconst {\n  NativeScriptWorkerPlugin\n} = require('nativescript-worker-loader/NativeScriptWorkerPlugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nconst {\n  getAngularCompilerPlugin\n} = require('@nativescript/webpack/plugins/NativeScriptAngularCompilerPlugin');\nconst hashSalt = Date.now().toString();\n\nmodule.exports = env => {\n  // Add your custom Activities, Services and other Android app components here.\n  const appComponents = [\n    \"@nativescript/core/ui/frame\", \"@nativescript/core/ui/frame/activity\"\n  ];\n\n  const platform = env && ((env.android && 'android') || (env.ios && 'ios'));\n  if (!platform) {\n    throw new Error('You need to provide a target platform!');\n  }\n\n  const AngularCompilerPlugin = getAngularCompilerPlugin(platform);\n  const projectRoot = __dirname;\n\n  // Default destination inside platforms/<platform>/...\n  const dist = resolve(\n    projectRoot,\n    nsWebpack.getAppPath(platform, projectRoot)\n  );\n\n  const {\n    // The 'appPath' and 'appResourcesPath' values are fetched from\n    // the nsconfig.json configuration file\n    // when bundling with `tns run android|ios --bundle`.\n    appPath = 'src',\n    appResourcesPath = 'App_Resources',\n\n    // You can provide the following flags when running 'tns run android|ios'\n    snapshot, // --env.snapshot,\n    production, // --env.production\n    configuration, // --env.configuration (consistent with angular cli usage)\n    projectName, // --env.projectName (drive configuration through angular projects)\n    uglify, // --env.uglify\n    report, // --env.report\n    sourceMap, // --env.sourceMap\n    hiddenSourceMap, // --env.hiddenSourceMap\n    hmr, // --env.hmr,\n    unitTesting, // --env.unitTesting\n    testing, // --env.testing\n    verbose, // --env.verbose\n    ci, // --env.ci\n    snapshotInDocker, // --env.snapshotInDocker\n    skipSnapshotTools, // --env.skipSnapshotTools\n    compileSnapshot // --env.compileSnapshot\n  } = env;\n\n  const { fileReplacements, copyReplacements } = parseWorkspaceConfig(platform, configuration, projectName);\n\n  const useLibs = compileSnapshot;\n  const isAnySourceMapEnabled = !!sourceMap || !!hiddenSourceMap;\n  const externals = nsWebpack.getConvertedExternals(env.externals);\n  const appFullPath = resolve(projectRoot, appPath);\n  const appResourcesFullPath = resolve(projectRoot, appResourcesPath);\n  let tsConfigName = 'tsconfig.json';\n  let tsConfigPath = resolve(projectRoot, tsConfigName);\n  const tsConfigTnsName = 'tsconfig.tns.json';\n  const tsConfigTnsPath = resolve(projectRoot, tsConfigTnsName);\n  if (fs.existsSync(tsConfigTnsPath)) {\n    // support shared angular app configurations\n    tsConfigName = tsConfigTnsName;\n    tsConfigPath = tsConfigTnsPath;\n  }\n  const tsConfigEnvName = 'tsconfig.env.json';\n  const tsConfigEnvPath = resolve(projectRoot, tsConfigEnvName);\n  if (hasConfigurations(configuration) && fs.existsSync(tsConfigEnvPath)) {\n    // when configurations are used, switch to environments supported config\n    tsConfigName = tsConfigEnvName;\n    tsConfigPath = tsConfigEnvPath;\n  }\n  const entryModule = `${nsWebpack.getEntryModule(appFullPath, platform)}.ts`;\n  const entryPath = `.${sep}${entryModule}`;\n  const entries = { bundle: entryPath };\n  const areCoreModulesExternal =\n    Array.isArray(env.externals) &&\n    env.externals.some(e => e.indexOf('@nativescript') > -1);\n  if (platform === 'ios' && !areCoreModulesExternal && !testing) {\n    entries['tns_modules/@nativescript/core/inspector_modules'] =\n      'inspector_modules';\n  }\n\n  const compilerOptions = getCompilerOptionsFromTSConfig(tsConfigPath);\n  nsWebpack.processTsPathsForScopedModules({ compilerOptions });\n  nsWebpack.processTsPathsForScopedAngular({ compilerOptions });\n\n  const ngCompilerTransformers = [nsTransformNativeClassesNg];\n  const additionalLazyModuleResources = [];\n\n  const copyIgnore = { ignore: [`${relative(appPath, appResourcesFullPath)}/**`] };\n  const copyTargets = [\n    { from: { glob: 'assets/**', dot: false } },\n    { from: { glob: 'fonts/**', dot: false } },\n    ...copyReplacements,\n  ];\n\n  if (!production) {\n    // for development purposes only\n    // for example, include mock json folder\n    // copyTargets.push({ from: 'tools/mockdata', to: 'assets/mockdata' });\n\n    if (hmr) {\n      ngCompilerTransformers.push(nsSupportHmrNg);\n    }\n  }\n\n  // when \"@angular/core\" is external, it's not included in the bundles. In this way, it will be used\n  // directly from node_modules and the Angular modules loader won't be able to resolve the lazy routes\n  // fixes https://github.com/NativeScript/nativescript-cli/issues/4024\n  if (env.externals && env.externals.indexOf('@angular/core') > -1) {\n    const appModuleRelativePath = getMainModulePath(\n      resolve(appFullPath, entryModule),\n      tsConfigName\n    );\n    if (appModuleRelativePath) {\n      const appModuleFolderPath = dirname(\n        resolve(appFullPath, appModuleRelativePath)\n      );\n      // include the new lazy loader path in the allowed ones\n      additionalLazyModuleResources.push(appModuleFolderPath);\n    }\n  }\n\n  const ngCompilerPlugin = new AngularCompilerPlugin({\n    hostReplacementPaths: nsWebpack.getResolver([platform, 'tns']),\n    platformTransformers: ngCompilerTransformers.map(t =>\n      t(() => ngCompilerPlugin, resolve(appFullPath, entryModule), projectRoot)\n    ),\n    mainPath: join(appFullPath, entryModule),\n    tsConfigPath,\n    skipCodeGeneration: false,\n    sourceMap: !!isAnySourceMapEnabled,\n    additionalLazyModuleResources: additionalLazyModuleResources,\n    compilerOptions: { paths: compilerOptions.paths }\n  });\n\n  let sourceMapFilename = nsWebpack.getSourceMapFilename(\n    hiddenSourceMap,\n    __dirname,\n    dist\n  );\n\n  const itemsToClean = [`${dist}/**/*`];\n  if (platform === 'android') {\n    itemsToClean.push(\n      `${join(\n        projectRoot,\n        'platforms',\n        'android',\n        'app',\n        'src',\n        'main',\n        'assets',\n        'snapshots'\n      )}`\n    );\n    itemsToClean.push(\n      `${join(\n        projectRoot,\n        'platforms',\n        'android',\n        'app',\n        'build',\n        'configurations',\n        'nativescript-android-snapshot'\n      )}`\n    );\n  }\n\n  const noEmitOnErrorFromTSConfig = getNoEmitOnErrorFromTSConfig(tsConfigName);\n\n  // Shut up typeorm and nativescript-sqlite warnings\n  externals.push('module');\n  externals.push('typeorm-aurora-data-api-driver');\n  externals.push('sqlite3');\n  externals.push('sql.js');\n  externals.push('redis');\n  externals.push('react-native-sqlite-storage');\n  externals.push('pg-query-stream');\n  externals.push('pg-native');\n  externals.push('pg');\n  externals.push('oracledb');\n  externals.push('nativescript-sqlite-sync');\n  externals.push('nativescript-sqlite-encrypted');\n  externals.push('nativescript-sqlite-commercial');\n  externals.push('mysql2');\n  externals.push('mysql');\n  externals.push('mssql');\n  externals.push('mongodb');\n  externals.push('ioredis');\n  externals.push('hdb-pool');\n  externals.push('better-sqlite3');\n  externals.push('@sap/hana-client');\n\n  nsWebpack.processAppComponents(appComponents, platform);\n  const config = {\n    mode: production ? 'production' : 'development',\n    context: appFullPath,\n    externals,\n    watchOptions: {\n      ignored: [\n        appResourcesFullPath,\n        // Don't watch hidden files\n        '**/.*'\n      ]\n    },\n    target: nativescriptTarget,\n    entry: entries,\n    output: {\n      pathinfo: false,\n      path: dist,\n      sourceMapFilename,\n      libraryTarget: 'commonjs2',\n      filename: '[name].js',\n      globalObject: 'global',\n      hashSalt\n    },\n    resolve: {\n      extensions: ['.ts', '.js', '.scss', '.css'],\n      // Resolve {N} system modules from @nativescript/core\n      modules: [\n        resolve(__dirname, 'node_modules/@nativescript/core'),\n        resolve(__dirname, 'node_modules'),\n        'node_modules/@nativescript/core',\n        'node_modules'\n      ],\n      alias: {\n        '~/package.json': resolve(projectRoot, 'package.json'),\n        '~': appFullPath,\n        \"tns-core-modules\": \"@nativescript/core\",\n        \"nativescript-angular\": \"@nativescript/angular\",\n        ...fileReplacements\n      },\n      symlinks: true,\n      // Again typeorm requires stuff not in nativescript\n      mainFields: ['browser', 'module', 'main'],\n    },\n    resolveLoader: {\n      symlinks: false\n    },\n    node: {\n      // Disable node shims that conflict with NativeScript\n      http: false,\n      timers: 'empty',\n      setImmediate: false,\n      fs: 'empty',\n      __dirname: false\n    },\n    devtool: hiddenSourceMap\n      ? 'hidden-source-map'\n      : sourceMap\n      ? 'inline-source-map'\n      : 'none',\n    optimization: {\n      runtimeChunk: 'single',\n      noEmitOnErrors: noEmitOnErrorFromTSConfig,\n      splitChunks: {\n        cacheGroups: {\n          vendor: {\n            name: 'vendor',\n            chunks: 'all',\n            test: (module, chunks) => {\n              const moduleName = module.nameForCondition\n                ? module.nameForCondition()\n                : '';\n              return (\n                /[\\\\/]node_modules[\\\\/]/.test(moduleName) ||\n                appComponents.some(comp => comp === moduleName)\n              );\n            },\n            enforce: true\n          }\n        }\n      },\n      minimize: !!uglify,\n      minimizer: [\n        new TerserPlugin({\n          parallel: true,\n          cache: !ci,\n          sourceMap: isAnySourceMapEnabled,\n          terserOptions: {\n            output: {\n              comments: false,\n              semicolons: !isAnySourceMapEnabled\n            },\n            compress: {\n              // The Android SBG has problems parsing the output\n              // when these options are enabled\n              collapse_vars: platform !== 'android',\n              sequences: platform !== 'android',\n              // custom\n              drop_console: true,\n              drop_debugger: true,\n              ecma: 6,\n              keep_infinity: platform === 'android', // for Chrome/V8\n              reduce_funcs: platform !== 'android', // for Chrome/V8\n              global_defs: {\n                __UGLIFIED__: true\n              }\n            },\n            // custom\n            ecma: 6,\n            safari10: platform !== 'android'\n          }\n        })\n      ]\n    },\n    module: {\n      rules: [\n        {\n          include: join(appFullPath, entryPath),\n          use: [\n            // Require all Android app components\n            platform === 'android' && {\n              loader: '@nativescript/webpack/helpers/android-app-components-loader',\n              options: { modules: appComponents }\n            },\n\n            {\n              loader: '@nativescript/webpack/bundle-config-loader',\n              options: {\n                angular: true,\n                loadCss: !snapshot, // load the application css if in debug mode\n                unitTesting,\n                appFullPath,\n                projectRoot,\n                ignoredFiles: nsWebpack.getUserDefinedEntries(entries, platform)\n              }\n            }\n          ].filter(loader => !!loader)\n        },\n\n        { test: /\\.html$|\\.xml$/, use: 'raw-loader' },\n\n        {\n          test: /[\\/|\\\\]app\\.css$/,\n          use: [\n              '@nativescript/webpack/helpers/style-hot-loader',\n              {\n                  loader: \"@nativescript/webpack/helpers/css2json-loader\",\n                  options: { useForImports: true }\n              },\n          ],\n        },\n        {\n          test: /[\\/|\\\\]app\\.scss$/,\n          use: [\n              '@nativescript/webpack/helpers/style-hot-loader',\n              {\n                  loader: \"@nativescript/webpack/helpers/css2json-loader\",\n                  options: { useForImports: true }\n              },\n              'sass-loader',\n          ],\n        },\n\n        // Angular components reference css files and their imports using raw-loader\n        { test: /\\.css$/, exclude: /[\\/|\\\\]app\\.css$/, use: 'raw-loader' },\n        {\n          test: /\\.scss$/,\n          exclude: /[\\/|\\\\]app\\.scss$/,\n          use: ['raw-loader', 'resolve-url-loader', 'sass-loader']\n        },\n\n        {\n          test: /(?:\\.ngfactory\\.js|\\.ngstyle\\.js|\\.ts)$/,\n          use: [\n            '@nativescript/webpack/helpers/moduleid-compat-loader',\n            '@nativescript/webpack/helpers/lazy-ngmodule-hot-loader',\n            '@ngtools/webpack'\n          ]\n        },\n\n        // Mark files inside `@angular/core` as using SystemJS style dynamic imports.\n        // Removing this will cause deprecation warnings to appear.\n        {\n          test: /[\\/\\\\]@angular[\\/\\\\]core[\\/\\\\].+\\.js$/,\n          parser: { system: true }\n        }\n      ]\n    },\n    plugins: [\n      // Define useful constants like TNS_WEBPACK\n      new webpack.DefinePlugin({\n        'global.TNS_WEBPACK': 'true',\n        'global.isAndroid': platform === 'android',\n        'global.isIOS': platform === 'ios',\n        'process.env.NODE_ENV': JSON.stringify(production ? 'production' : 'development'),\n      }),\n      // Remove all files from the out dir.\n      new CleanWebpackPlugin({\n        cleanOnceBeforeBuildPatterns: itemsToClean,\n        verbose: !!verbose\n      }),\n      // Copy assets\n      new CopyWebpackPlugin([\n        ...copyTargets,\n        { from: { glob: '**/*.jpg', dot: false } },\n        { from: { glob: '**/*.png', dot: false } },\n      ], copyIgnore),\n      new nsWebpack.GenerateNativeScriptEntryPointsPlugin('bundle'),\n      // For instructions on how to set up workers with webpack\n      // check out https://github.com/nativescript/worker-loader\n      new NativeScriptWorkerPlugin(),\n      ngCompilerPlugin,\n      // Does IPC communication with the {N} CLI to notify events when running in watch mode.\n      new nsWebpack.WatchStateLoggerPlugin()\n    ],\n    stats: {\n      warningsFilter: [/critical dependency:/i],\n    },\n  };\n\n  if (report) {\n    // Generate report files for bundles content\n    config.plugins.push(\n      new BundleAnalyzerPlugin({\n        analyzerMode: 'static',\n        openAnalyzer: false,\n        generateStatsFile: true,\n        reportFilename: resolve(projectRoot, 'report', `report.html`),\n        statsFilename: resolve(projectRoot, 'report', `stats.json`)\n      })\n    );\n  }\n\n  if (snapshot) {\n    config.plugins.push(\n      new nsWebpack.NativeScriptSnapshotPlugin({\n        chunk: 'vendor',\n        angular: true,\n        requireModules: [\n          'reflect-metadata',\n          '@angular/platform-browser',\n          '@angular/core',\n          '@angular/common',\n          '@angular/router',\n          '@nativescript/angular'\n        ],\n        projectRoot,\n        webpackConfig: config,\n        snapshotInDocker,\n        skipSnapshotTools,\n        useLibs\n      })\n    );\n  }\n\n  if (!production && hmr) {\n    config.plugins.push(new webpack.HotModuleReplacementPlugin());\n  }\n\n  return config;\n};","position":{"start":{"line":129,"column":1,"offset":6848},"end":{"line":611,"column":4,"offset":22749}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":612,"column":1,"offset":22750}}}}},"__N_SSG":true}